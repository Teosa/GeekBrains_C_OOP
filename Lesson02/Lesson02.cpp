#include <iostream>

#include "Apple.h"
#include "Banana.h"
#include "GrannySmith.h"
#include "Person.h"
#include "Student.h"

/* Задание 1
 * Создать класс Person (человек) с полями: имя, возраст, пол и вес.
 * Определить методы переназначения имени, изменения возраста и веса.
 * Создать производный класс Student (студент), имеющий поле года обучения.
 * Определить методы переназначения и увеличения этого значения. Создать счетчик количества созданных студентов.
 * В функции main() создать несколько (не больше трёх) студентов. Вывести информацию о них.
 */
void task01()
{
    Student lisa("Lisa", 12, WOMEN, 34.3, 2016);
    Student tabita("Tabita", 13, WOMEN, 31.8, 2015);
    Student rick("Rick", 12, MAN, 38.7, 2014);

    Student::printStudentsTotal();
    lisa.printInfo();
    tabita.printInfo();
    rick.printInfo();
    Student::printStudentsTotal();
}

/* Задание 2
 * Создать классы Apple (яблоко) и Banana (банан), которые наследуют класс Fruit (фрукт).
 * У Fruit есть две переменные-члена: name (имя) и color (цвет).
 * Добавить новый класс GrannySmith, который наследует класс Apple.
 */
void task02()
{
    Apple a("red");
    Banana b;
    GrannySmith c;
    
    std::cout << "My " << a.getName() << " is " << a.getColor() << ".\n";
    std::cout << "My " << b.getName() << " is " << b.getColor() << ".\n";
    std::cout << "My " << c.getName() << " is " << c.getColor() << ".\n";
}

/* Задание 3
 * Изучить правила игры в Blackjack.
 * Подумать, как написать данную игру на С++, используя объектно-ориентированное программирование.
 * Сколько будет классов в программе?
 * Какие классы будут базовыми, а какие производными?
 * Продумать реализацию игры с помощью классов и записать результаты в виде комментария в основном файле сдаваемой работы.
 */
/*
 * Где в данной игре требуется наследование я, к сожалению, не вижу
 *
 * Класс Player
 *  string name; - имя игрока
 *  int currentPoints; - количество очков в текущей игре
 *  bool turnPlayed; - сыграл ли игрок в текущей партии
 *  *Опционально
 *   - колличество побед за сессию
 *   - полученные карты (тогда можно не использовать поле currentPoints, а вычислять значение функцией по требованию)
 *
 * Класс Card
 *  набор полей класса зависит от требуемой реализации.
 *  При наличии графики, хранит в себе данные и функции для отрисовки карты на поле,
 *  без оной, минимальное содержимое - количество очков, которое дает карта
 *
 * Класс deckOfCards
 *  Card deck[]; - колода карт
 *  Методы:
 *  - Наполнение колоды
 *  - Выдача рандомных карт из колоды во время игры
 *  - Ресет колоды после перезапуска игры
 *
 * Класс Game
 *   players[]; - игроки
 *   bool gameInProgress; - признак того, что сейчас идет игра
 *   *В процессе реализации возможно понадобятся доп. поля*
 *  Методы:
 *   - Запись участвующих игроков в массив при запуске программы
 *   - Запуск игры / начало новой после окончания предыдущей
 *   - Функции отрисовки поля (если требуется)
 *   - Функции вывода на экран текущих данных по игре
 *
 *   В целом, опять же в зависимости от реализации, классы можно расширять доп. параметрами
 */

int main()
{
    task01();
    task02();
    
    return 0;
}
